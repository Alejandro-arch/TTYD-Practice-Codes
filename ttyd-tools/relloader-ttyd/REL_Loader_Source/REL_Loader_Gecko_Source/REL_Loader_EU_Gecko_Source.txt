# Code created by PistonMiner and Zephiles

# 800710F4 - Address to hook for this code

# Static values used for addresses/pointers
lis r21,0x802B
lis r22,0x8000
lis r23,0x8003
lis r24,0x8029

# Check if a Memory Card is present
ori r3,r21,0x3610 # CARDProbeEx
mtlr r3
li r3,0 # Memory Card Slot A
li r4,0 # Memory Size (Not needed, so NULL)
li r5,0 # Sector Size (Not needed, so NULL)
blrl
cmpwi r3,0 # Make sure nothing is wrong with the card
bne- Exit

# Mount the Memory Card
ori r3,r21,0x3D18 # CARDMountAsync
mtlr r3
li r3,0 # Memory Card Slot A
lwz r4,0x1C78(r13)
lwz r4,0x4(r4) # Pointer to Work Area
li r5,0 # Detach Callback Function (Want to avoid using, so NULL)
li r6,0 # Attach Callback Function (Want to avoid using, so NULL)
blrl
cmpwi r3,0 # Check if Mounting failed or not
bne- Exit
bl CallCARDGetResultCode
cmpwi r3,0 # Check if something went wrong
bne- Exit

# Open the file
ori r3,r21,0x4C58 # CARDOpen
mtlr r3
li r3,0 # Memory Card Slot A
ori r4,r22,0x40DC # File Name
addi r5,r4,0x10 # Card File Structure Output Area
blrl
cmpwi r3,0 # Check For Exception
bne- UnmountCard

# Allocate 512 bytes of memory, as the read size must be in multiples of 512 bytes
li r4,512 # Bytes to allocate
bl AllocateMemory

# Read from the Card
li r5,512 # Amount of bytes to read
li r6,0x2000 # Offset in file to start reading from
bl CallCARDReadAsync
cmpwi r3,0 # Check if something went wrong
bne- Free512OrBSSArea

# Get File Size, and adjust to be in multiples of 512 bytes
lwz r15,0x40(r14) # File Size
addi r15,r15,511
rlwinm r15,r15,0,0,22 # Adjusted File Size

# Free the 512 bytes from earlier
mr r4,r14 # Address of allocated bytes
bl FreeMemory

# Allocate more bytes based on the Adjusted File Size
mr r4,r15 # Adjusted File Size
bl AllocateMemory

# Read REL Area of the file
mr r5,r15 # Adjusted File Size
li r6,0x2200 # Offset in file to start reading from
bl CallCARDReadAsync
cmpwi r3,0 # Check if something went wrong
bne- Free512OrBSSArea

# Get BSS Size
lwz r4,0x20(r14) # BSS Size

# Allocate more bytes based on the BSS Size
bl AllocateMemory

# Link the functions in the REL
mr r4,r3 # Address of allocated bytes
mr r15,r3 # Backup of the Address to use for later
ori r3,r24,0xE930 # OSLink
mtlr r3
mr r3,r14 # File Buffer
blrl
cmpwi r3,1 # Check if something went wrong
bne- FreeRemainingRAM

# Store BSS Buffer and File Buffer
stw r15,0x414C(r22) # BSS Buffer
stw r14,0x4150(r22) # File Buffer

# Run REL Prolog
lwz r3,0x34(r14) # Prolog
mtlr r3
blrl

# Done, so Close Card and Unmount
b CloseCard

FreeMemory:
ori r3,r23,0x01AC # __memFree
b AllocateOrFreeMemory

AllocateMemory:
ori r3,r23,0x01D8 # __memAlloc

AllocateOrFreeMemory:
mtctr r3
li r3,0 # Heap to use
bctr

# CARDGetResultCode needs to be called every time an Async function runs
CallCARDGetResultCode:
mflr r17

CallCARDGetResultCodeMain:
ori r3,r21,0x07C0 # CARDGetResultCode
mtlr r3
li r3,0 # Memory Card Slot A
blrl
cmpwi r3,-1 # Still working
beq+ CallCARDGetResultCodeMain
mtlr r17
blr

CallCARDReadAsync:
mflr r17
mr r4,r3 # Address of allocated bytes
mr r14,r3 # Backup of the Address to use for later
ori r3,r21,0x5408 # CARDReadAsync
mtlr r3
ori r3,r22,0x40EC # Output Area from CARDOpen
li r7,0 # Read Callback Function (Want to avoid using, so NULL)
blrl
cmpwi r3,0 # Check if something went wrong
bne- Free512OrBSSArea
b CallCARDGetResultCodeMain

Free512OrBSSArea:
mr r4,r14 # Address of allocated bytes
bl FreeMemory
b CloseCard

FreeRemainingRAM:
ori r3,r24,0xEB8C # OSUnlink
mtlr r3
mr r3,r14 # File Buffer
blrl

mr r4,r15 # BSS Buffer
bl FreeMemory
mr r4,r14 # File Buffer
bl FreeMemory

CloseCard:
ori r3,r21,0x4D74 # CARDClose
mtlr r3
ori r3,r22,0x40EC # Output Area from CARDOpen
blrl

UnmountCard:
ori r3,r21,0x3F54 # CARDUnmount
mtlr r3
li r3,0 # Memory Card Slot A
blrl

Exit:
# Add back in overwritten instruction
li r3,0